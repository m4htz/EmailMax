---
description: Estabelece as regras e diretrizes para o desenvolvimento do nosso sistema de gerenciamento e automaÃ§Ã£o de email, com foco em boas prÃ¡ticas, padrÃµes de codificaÃ§Ã£o e trabalho eficiente com assistentes de IA.
globs: 
alwaysApply: false
---
# Diretrizes de Desenvolvimento do Sistema de Email

## ğŸ“‹ PrincÃ­pios Gerais para Desenvolvimento com IA

### Gerenciamento de Projeto
- **Utilizar arquivos markdown para organizaÃ§Ã£o do projeto**: Manter atualizados `TASK.md`

### CÃ³digo e Arquitetura
- **Manter arquivos com menos de 500 linhas**: Dividir em mÃ³dulos quando necessÃ¡rio
- **Organizar cÃ³digo em mÃ³dulos claramente separados**: Agrupar por funcionalidade ou responsabilidade

## ğŸ”„ ConsciÃªncia de Projeto e Contexto

- **Verificar `TASK.md`** antes de iniciar uma nova tarefa. Se a tarefa nÃ£o estiver listada, adicionÃ¡-la com uma breve descriÃ§Ã£o

## ğŸ§± Estrutura de CÃ³digo e Modularidade

- **Manter clara separaÃ§Ã£o entre frontend e backend**:

## ğŸ§ª Testes e Confiabilidade

- **Criar testes para novos recursos** (funÃ§Ãµes, componentes, rotas, etc.)
- **ApÃ³s atualizar qualquer lÃ³gica**, verificar se os testes existentes precisam ser atualizados
- **Os testes devem estar em um diretÃ³rio `/tests` ou `/__tests__`** seguindo a estrutura principal do aplicativo
  - Incluir pelo menos:
    - 1 teste para uso esperado
    - 1 caso de borda
    - 1 caso de falha

## âœ… ConclusÃ£o de Tarefas

- **Marcar tarefas concluÃ­das em `TASK.md`** imediatamente apÃ³s finalizÃ¡-las
- **Adicionar novas subtarefas ou TODOs** descobertos durante o desenvolvimento ao `TASK.md` em uma seÃ§Ã£o "Descobertos Durante o Trabalho"
- **Confirmar a conclusÃ£o** testando a funcionalidade em seu contexto de uso


## ğŸ“š DocumentaÃ§Ã£o e Explicabilidade

- **Comentar cÃ³digo nÃ£o Ã³bvio** e garantir que tudo seja compreensÃ­vel para um desenvolvedor de nÃ­vel intermediÃ¡rio
- **Ao escrever lÃ³gica complexa**, adicionar um comentÃ¡rio inline `// RazÃ£o:` explicando o porquÃª, nÃ£o apenas o quÃª
- **Documentar todos os mÃ³dulos principais** com uma breve descriÃ§Ã£o de sua responsabilidade e como interagem com outros mÃ³dulos

## ğŸ§  Regras de Comportamento

- **Nunca assumir contexto ausente. Fazer perguntas quando incerto**

- **Sempre confirmar caminhos de arquivo e nomes de mÃ³dulos** existentes antes de referenciÃ¡-los no cÃ³digo ou testes